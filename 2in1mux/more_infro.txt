`timescale 1ns/1ns

module tb_tv ();

    wire[7:0] out,in1,in2;
    nand n_gate[7:0] (out,in1,in2) -> 이런식으로 인스턴스에 배열을 선언하면, 수가 맞을경우, 각 bit마다 연산하는 결과와 같아짐.
    (굳이 8번 따로 쓸 필요가 없어짐)



    buf (out, in) , bufif1 (out,in,sel), bufif0(out,in,sel) -> sel이 만족값 안하면 출력은 z
    not 도 포함


    기본 게이트 (not, buf , and, nand, nor, xnor, xor) 는 항상 출력이 가장 먼저 앞, 입력은 그 이후로 여러개, 
    기본 게이트 앞에 #(상승시간, 하강시간, hight-impedence 시간) -> 각 시간마다 최소:보통:최대 딜레이 설정가능

    상승시간 : 0,z,x -> 1 되는데 걸리는시간
    하강시간 : 1,z,x -> 0 되는데 걸리는시간
    high-impedence time : 0,1,x -> 0 되는데 걸리는 시간

    -> ex and #(2:3:6, 3:10:11, 4:5:6) a1(out, in1, in2)
      -> 상승시간은 2~6, 보통은 3 // 하강시간은 3~11ㅡ 보통은 10, high-impedence시간은 4~6, 보통은 5,


    Implict Continuous Assignment 

    wire out;
    assign out = in1 & in2 ; 해도 되나, out=in1&in2 바로 wire 선언 없이 가능, 단 in1,in2가 전부 wire라고 인식이 되어야함.
    주의 : 벡터사용시 이게 통하지 않음. 무조건 선언 미리 할 것.

    assign addr[15:0] = addr1_bits[15:0] ^ addr2_bits[15:0] 이런식 가능 , 단 operand들은 벡터로 이미 선언이 되어 있어야함.

    assign #10 out = in1 & in2 -> 입력값이 바뀌고 나서 10초동안 아무 값이 안바뀌면 그때 out에 반영됨,
        그 전에 만약 (즉 10초 딜레이 전에) 입력값이 바뀌면, 그 때 다시 10초 딜레이 후 반영됨 (게이트 딜레이도 여기에 포함)
            wire #10 out ; assign out = in1 & in2; 는 assign #10 out = in1 &in2 와 같음. (단 같은 모듈 & 인스턴스 내부라면)

    음수취급 : -4b'1002 , -5d'12 , 혹은 sign 선언 될경우 그냥 -10 이런식 가능 (ex :reg signed [4:0]a)
     a = -4b;3 === 1101 , verilog에서 sign은 전부 2의보수로 취급한다.

    -논리 operations-
    && || ! -> 이 경우 항상 출력은 1 아니면 0이다, 이때 입력은 0 이면 false , 이외 숫자들은 전부 true로 취급한다.
    ex -> A=4b'1100 , B=4b'0100 , C=0 -> A&&B = 1, A||B = 1, !{(A==1) || (B==3)} -> 1 , !A -> 0 !C = 1

    대소 구별시 어느 한 bit라도 x나 z가 있을경우, 출력의 모든 bit는 X로 처리된다!

    Equality equation :
     == , != 는 오로지 숫자비교, 입력 bit안에 x 나 z가 나오면 출력은 무조건 x -> 출력은 1 아니면 0 아니면 x
     === , !=== 는 각 bit마다 1 0 x z 다 비교, 각 bit가 같으면 1 하나라도 다르면 0; -> 출력은 1 아니면 0

     Bitwise operation : 하나하나 bit를 전부 봄  -> 2개의 operand가 필요함!
        -> (not : ~ // and : & // or : | // xor : ^ // xnor : ^~ , ~^ )
        -> a=4b'1010, b= 4b'1101  -> a&b == 4b'1000 , a|b==4b'1111 , a^~b== 4b'1000

    Reduction Operator : 오로지 한개의 operand가 필요함 , 하나의 operand의 모든 비트끼리 전부 논리연산을 함.
        -> (and : &// nand : ~& // or : | // xor : ^ // xnor : ^~ , ~^ )
        -> a=4b'110x , &a === (a[3] & a[2] & a[1] & a[0])
    
    shift 연산자:
     operand<<숫자 -> 오른쪽으로 숫자만큼 bit이동 ////  operand>>숫자 왼쪽으로 숫자만큼 bit이동, 둘다 빈 bit는 무조건 0
     operand<<<숫자 -> 오른쪽으로 숫자만큼 bit이동 ,빈칸은 그냥 0으로 채움 ////  operand>>>숫자 왼쪽으로 숫자만큼 bit이동, 빈 bit는 원래 MSB값을 따라 채움

     concentration 
        a=1b'0 ; b=2b'00 -> assign c = {a,b} === 100 
        assign {c,out} = a+b+cin 이런식도 가능. 여러개 묶는것도 가능.

     repetition
        reg a=1b'1;
        reg b=2b'00;
        reg c=4b'1011;

        -> reg [7:0]C

        c = {4{a} , 2{b} } === 8b'11110000
        c = {b , 2{a} , c} === 8b'00111011
    
endmodule