$date
	Sun Jun 05 02:48:29 2022
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module cpu_tb_v $end
$var wire 16 ! instruction [15:0] $end
$var reg 1 " clk $end
$var reg 1 # rst $end
$scope module test $end
$var wire 16 $ act_instruction [15:0] $end
$var wire 1 " clk $end
$var wire 1 # rst $end
$var wire 1 % zeroflag $end
$var wire 16 & write_data_mid [15:0] $end
$var wire 13 ' sign_extendion [12:0] $end
$var wire 13 ( selected_j_or_beqpc1 [12:0] $end
$var wire 3 ) sel_reg_write_loc_output [2:0] $end
$var wire 16 * sel_imm_result [15:0] $end
$var wire 16 + rt [15:0] $end
$var wire 16 , rs [15:0] $end
$var wire 2 - regdst [1:0] $end
$var wire 16 . reg_write_data [15:0] $end
$var wire 1 / reg_write $end
$var wire 13 0 pc_next [12:0] $end
$var wire 13 1 pc_current [12:0] $end
$var wire 13 2 pc_add1 [12:0] $end
$var wire 1 3 mem_write $end
$var wire 2 4 mem_to_reg [1:0] $end
$var wire 1 5 mem_read $end
$var wire 1 6 jump $end
$var wire 1 7 jr_sel $end
$var wire 16 8 instruction [15:0] $end
$var wire 1 9 branch $end
$var wire 13 : beqpc1 [12:0] $end
$var wire 13 ; beq_cal_result [12:0] $end
$var wire 1 < alusrc $end
$var wire 2 = aluop [1:0] $end
$var wire 3 > alu_sel [2:0] $end
$var wire 16 ? alu_result [15:0] $end
$scope module alu_oper $end
$var wire 1 % zero $end
$var wire 16 @ rt [15:0] $end
$var wire 16 A rd [15:0] $end
$var wire 3 B alu_ctrl [2:0] $end
$var reg 1 C ov $end
$var reg 16 D result [15:0] $end
$var reg 32 E temp [31:0] $end
$upscope $end
$scope module aluctrl $end
$var wire 4 F instruction [3:0] $end
$var wire 2 G aluop [1:0] $end
$var reg 3 H alu_sel [2:0] $end
$upscope $end
$scope module beq_calcu $end
$var wire 13 I b [12:0] $end
$var wire 13 J a [12:0] $end
$var reg 13 K out [12:0] $end
$upscope $end
$scope module ctrl $end
$var wire 3 L instruction [2:0] $end
$var wire 1 # rst $end
$var reg 2 M aluOp [1:0] $end
$var reg 1 < aluSrc $end
$var reg 1 9 branch $end
$var reg 1 6 jump $end
$var reg 1 5 mem_read $end
$var reg 2 N mem_to_reg [1:0] $end
$var reg 1 3 mem_write $end
$var reg 2 O regDst [1:0] $end
$var reg 1 / reg_write $end
$upscope $end
$scope module dt_memory $end
$var wire 16 P addr [15:0] $end
$var wire 1 " clk $end
$var wire 1 5 re $end
$var wire 1 # rst $end
$var wire 1 3 we $end
$var wire 16 Q strm [15:0] $end
$var wire 16 R data [15:0] $end
$var integer 32 S i [31:0] $end
$upscope $end
$scope module inst $end
$var wire 1 9 branch $end
$var wire 1 " clk $end
$var wire 1 6 jump $end
$var wire 1 # rst $end
$var wire 13 T pc [12:0] $end
$var wire 1 7 jr_sel $end
$var wire 13 U j_or_branchpc [12:0] $end
$var reg 16 V instruct [15:0] $end
$upscope $end
$scope module jrctrl $end
$var wire 2 W aluop [1:0] $end
$var wire 4 X instruction [3:0] $end
$var wire 1 7 jr_out $end
$upscope $end
$scope module pc_1_adder $end
$var wire 13 Y b [12:0] $end
$var wire 13 Z a [12:0] $end
$var reg 13 [ out [12:0] $end
$upscope $end
$scope module pc_to_instruct $end
$var wire 1 9 branch $end
$var wire 1 " clk $end
$var wire 1 6 jump $end
$var wire 1 # rst $end
$var wire 13 \ nextpc [12:0] $end
$var reg 13 ] pc [12:0] $end
$upscope $end
$scope module regist_oper $end
$var wire 1 " clk $end
$var wire 1 / reg_write $end
$var wire 3 ^ rs_loc [2:0] $end
$var wire 1 # rst $end
$var wire 3 _ rt_loc [2:0] $end
$var wire 3 ` write_reg_loc [2:0] $end
$var wire 16 a write_reg_data [15:0] $end
$var wire 16 b rt [15:0] $end
$var wire 16 c rs [15:0] $end
$upscope $end
$scope module sel_imm $end
$var wire 16 d a [15:0] $end
$var wire 16 e b [15:0] $end
$var wire 1 < sel $end
$var wire 16 f out [15:0] $end
$upscope $end
$scope module sel_jr_or_jbeqpc1 $end
$var wire 13 g b [12:0] $end
$var wire 1 7 sel $end
$var wire 13 h out [12:0] $end
$var wire 13 i a [12:0] $end
$upscope $end
$scope module sel_jump_or_beqpc1 $end
$var wire 13 j b [12:0] $end
$var wire 1 6 sel $end
$var wire 13 k out [12:0] $end
$var wire 13 l a [12:0] $end
$upscope $end
$scope module sel_pcadd1_or_beq $end
$var wire 13 m a [12:0] $end
$var wire 13 n b [12:0] $end
$var wire 1 o sel $end
$var wire 13 p out [12:0] $end
$upscope $end
$scope module sel_reg_write_data $end
$var wire 16 q a1 [15:0] $end
$var wire 16 r a2 [15:0] $end
$var wire 16 s a3 [15:0] $end
$var wire 2 t sel [1:0] $end
$var wire 16 u out [15:0] $end
$upscope $end
$scope module sel_reg_write_loc $end
$var wire 3 v a1 [2:0] $end
$var wire 3 w a2 [2:0] $end
$var wire 3 x a3 [2:0] $end
$var wire 2 y sel [1:0] $end
$var wire 3 z out [2:0] $end
$upscope $end
$scope module to_13bit_extend $end
$var wire 7 { instruction [6:0] $end
$var wire 13 | extended_instruction [12:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 |
b0 {
b0 z
b0 y
b111 x
b0 w
b0 v
b0 u
b0 t
b1 s
b0 r
b0 q
b1 p
0o
b0 n
b1 m
b1 l
b1 k
b0 j
b1 i
b1 h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b0 _
b0 ^
b0 ]
b1 \
b1 [
b0 Z
b1 Y
b0 X
b0 W
b0 V
b1 U
b0 T
b10000000 S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
bx E
b0 D
0C
b0 B
b0 A
b0 @
b0 ?
b0 >
b0 =
0<
b0 ;
b1 :
09
b0 8
07
06
05
b0 4
03
b1 2
b0 1
b1 0
0/
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
b1 (
b0 '
b0 &
1%
b0 $
0#
0"
b0 !
$end
#5
b10000000 S
1"
#10
0"
#15
b10000000 S
1"
#20
1/
b1 -
b1 O
b1 y
0"
1#
#25
b10 0
b10 U
b10 \
b10 h
b10 (
b10 i
b10 k
b10 :
b10 l
b10 p
b10 s
b10 2
b10 [
b10 m
b10 ;
b10 K
b10 n
b1 1
b1 J
b1 T
b1 Z
b1 ]
b100011 .
b100011 a
b100011 u
0%
b100011 &
b100011 Q
b100011 r
b1 ?
b1 D
b1 P
b1 q
b1 *
b1 A
b1 f
b10 )
b10 `
b10 z
b11 =
b11 G
b11 M
b11 W
15
b1 4
b1 N
b1 t
1<
b0 -
b0 O
b0 y
b1100100000001 j
b1 X
b1 F
b1 e
b1 '
b1 I
b1 |
b1 {
b10 _
b110 ^
b10 v
b100 L
b1001100100000001 !
b1001100100000001 $
b1001100100000001 8
b1001100100000001 V
1"
#30
0"
#35
b11 0
b11 U
b11 \
b11 h
b11 (
b11 i
b11 k
b11 :
b11 l
b11 p
b11 s
b11 2
b11 [
b11 m
b100 ;
b100 K
b100 n
b10 1
b10 J
b10 T
b10 Z
b10 ]
b1001 .
b1001 a
b1001 u
b1001 &
b1001 Q
b1001 r
b10 ?
b10 D
b10 P
b10 q
b10 *
b10 A
b10 f
b11 )
b11 `
b11 z
b1100110000010 j
b10 X
b10 F
b10 e
b10 '
b10 I
b10 |
b10 {
b11 _
b11 v
b1001100110000010 !
b1001100110000010 $
b1001100110000010 8
b1001100110000010 V
1"
#40
0"
#45
b100 0
b100 U
b100 \
b100 h
b100 (
b100 i
b100 k
b100 :
b100 l
b100 p
b100 s
b100 2
b100 [
b100 m
b1001 +
b1001 R
b1001 b
b1001 d
b1000011 ;
b1000011 K
b1000011 n
b11 1
b11 J
b11 T
b11 Z
b11 ]
b100011 g
b101100 ?
b101100 D
b101100 P
b101100 q
b100011 ,
b100011 @
b100011 c
b0 &
b0 Q
b0 r
b101100 .
b101100 a
b101100 u
b100 )
b100 `
b100 z
b1001 *
b1001 A
b1001 f
b0 =
b0 G
b0 M
b0 W
05
b0 4
b0 N
b0 t
0<
b1 -
b1 O
b1 y
b100111000000 j
b0 X
b0 F
b1000000 e
b1000000 '
b1000000 I
b1000000 |
b1000000 {
b10 ^
b100 w
b0 L
b100111000000 !
b100111000000 $
b100111000000 8
b100111000000 V
1"
#50
0"
#55
b101 0
b101 U
b101 \
b101 h
b101 (
b101 i
b101 k
b101 :
b101 l
b101 p
b101 s
b101 2
b101 [
b101 m
b11000 ;
b11000 K
b11000 n
b100 1
b100 J
b100 T
b100 Z
b100 ]
1%
b0 .
b0 a
b0 u
b0 ?
b0 D
b0 P
b0 q
b1 )
b1 `
b1 z
b100 >
b100 B
b100 H
b100110010100 j
b100 X
b100 F
b10100 e
b10100 '
b10100 I
b10100 |
b10100 {
b1 w
b100110010100 !
b100110010100 $
b100110010100 8
b100110010100 V
1"
#60
0"
#65
b110 s
b110 2
b110 [
b110 m
b111 ;
b111 K
b111 n
b101 1
b101 J
b101 T
b101 Z
b101 ]
b111 0
b111 U
b111 \
b111 h
1%
b111 (
b111 i
b111 k
b0 .
b0 a
b0 u
b111 :
b111 l
b111 p
b0 *
b0 A
b0 f
b0 g
0C
b0 ?
b0 D
b0 P
b0 q
1o
b0 )
b0 `
b0 z
b1 >
b1 B
b1 H
b0 +
b0 R
b0 b
b0 d
b0 ,
b0 @
b0 c
b1 =
b1 G
b1 M
b1 W
19
0/
b0 -
b0 O
b0 y
b10000000010 j
b10 X
b10 F
b10 e
b10 '
b10 I
b10 |
b10 {
b0 _
b1 ^
b0 w
b0 v
b110 L
b1100010000000010 !
b1100010000000010 $
b1100010000000010 8
b1100010000000010 V
1"
#70
0"
#75
b1000 s
b1000 2
b1000 [
b1000 m
b1001001 ;
b1001001 K
b1001001 n
b111 1
b111 J
b111 T
b111 Z
b111 ]
0%
b1 .
b1 a
b1 u
b1000 0
b1000 U
b1000 \
b1000 h
b1 ?
b1 D
b1 P
b1 q
b1000 (
b1000 i
b1000 k
b1001 *
b1001 A
b1001 f
b1000 :
b1000 l
b1000 p
b1001 +
b1001 R
b1001 b
b1001 d
b100011 g
b10 >
b10 B
b10 H
0o
b100011 ,
b100011 @
b100011 c
b100 )
b100 `
b100 z
b0 =
b0 G
b0 M
b0 W
09
1/
b1 -
b1 O
b1 y
b100111000010 j
b1000010 e
b1000010 '
b1000010 I
b1000010 |
b1000010 {
b11 _
b10 ^
b100 w
b11 v
b0 L
b100111000010 !
b100111000010 $
b100111000010 8
b100111000010 V
1"
#80
0"
#85
b1001 0
b1001 U
b1001 \
b1001 h
b1001 (
b1001 i
b1001 k
b1001 :
b1001 l
b1001 p
b1001 s
b1001 2
b1001 [
b1001 m
b1001001 ;
b1001001 K
b1001001 n
b1000 1
b1000 J
b1000 T
b1000 Z
b1000 ]
b11010 .
b11010 a
b11010 u
b11010 ?
b11010 D
b11010 P
b11010 q
b1 >
b1 B
b1 H
b100111000001 j
b1 X
b1 F
b1000001 e
b1000001 '
b1000001 I
b1000001 |
b1000001 {
b100111000001 !
b100111000001 $
b100111000001 8
b100111000001 V
1"
#90
0"
#95
b1010 0
b1010 U
b1010 \
b1010 h
b1010 (
b1010 i
b1010 k
b1010 :
b1010 l
b1010 p
b1010 s
b1010 2
b1010 [
b1010 m
b1001100 ;
b1001100 K
b1001100 n
b1001 1
b1001 J
b1001 T
b1001 Z
b1001 ]
b101011 .
b101011 a
b101011 u
b101011 ?
b101011 D
b101011 P
b101011 q
b11 >
b11 B
b11 H
b100111000011 j
b11 X
b11 F
b1000011 e
b1000011 '
b1000011 I
b1000011 |
b1000011 {
b100111000011 !
b100111000011 $
b100111000011 8
b100111000011 V
1"
#100
0"
#105
b1011 :
b1011 l
b1011 p
b1011 s
b1011 2
b1011 [
b1011 m
b10111 ;
b10111 K
b10111 n
b1010 1
b1010 J
b1010 T
b1010 Z
b1010 ]
1%
b1101 0
b1101 U
b1101 \
b1101 h
b0 *
b0 A
b0 f
b0 g
b0 ?
b0 D
b0 P
b0 q
b111 )
b111 `
b111 z
b1101 (
b1101 i
b1101 k
b1011 .
b1011 a
b1011 u
b0 +
b0 R
b0 b
b0 d
b0 ,
b0 @
b0 c
16
b10 4
b10 N
b10 t
b10 -
b10 O
b10 y
b1101 j
b1101 X
b1101 F
b1101 e
b1101 '
b1101 I
b1101 |
b1101 {
b0 _
b0 ^
b0 w
b0 v
b11 L
b110000000001101 !
b110000000001101 $
b110000000001101 8
b110000000001101 V
1"
#110
0"
#115
b1110 :
b1110 l
b1110 p
b1110 s
b1110 2
b1110 [
b1110 m
b1111 ;
b1111 K
b1111 n
b1101 1
b1101 J
b1101 T
b1101 Z
b1101 ]
0%
b101011 g
b1110 0
b1110 U
b1110 \
b1110 h
b101101 ?
b101101 D
b101101 P
b101101 q
b101011 +
b101011 R
b101011 b
b101011 d
b101011 ,
b101011 @
b101011 c
b101101 .
b101101 a
b101101 u
b10 *
b10 A
b10 f
b100 )
b100 `
b100 z
b1110 (
b1110 i
b1110 k
b0 >
b0 B
b0 H
06
b11 =
b11 G
b11 M
b11 W
b0 4
b0 N
b0 t
1<
b0 -
b0 O
b0 y
b1001000000010 j
b10 X
b10 F
b10 e
b10 '
b10 I
b10 |
b10 {
b100 _
b100 ^
b100 v
b111 L
b1111001000000010 !
b1111001000000010 $
b1111001000000010 8
b1111001000000010 V
1"
#120
0"
#125
b1111 0
b1111 U
b1111 \
b1111 h
b1111 (
b1111 i
b1111 k
b1111 :
b1111 l
b1111 p
b1111 s
b1111 2
b1111 [
b1111 m
b1010100 ;
b1010100 K
b1010100 n
b1110 1
b1110 J
b1110 T
b1110 Z
b1110 ]
b11 .
b11 a
b11 u
b100011 g
b11 ?
b11 D
b11 P
b11 q
b10000000000000000011 E
b110 >
b110 B
b110 H
b1001 *
b1001 A
b1001 f
b1001 +
b1001 R
b1001 b
b1001 d
b100011 ,
b100011 @
b100011 c
b100 )
b100 `
b100 z
b0 =
b0 G
b0 M
b0 W
0<
b1 -
b1 O
b1 y
b100111000110 j
b110 X
b110 F
b1000110 e
b1000110 '
b1000110 I
b1000110 |
b1000110 {
b11 _
b10 ^
b100 w
b11 v
b0 L
b100111000110 !
b100111000110 $
b100111000110 8
b100111000110 V
1"
#130
0"
#135
b10000 (
b10000 i
b10000 k
b10000 :
b10000 l
b10000 p
b10000 s
b10000 2
b10000 [
b10000 m
b10111 ;
b10111 K
b10111 n
b1111 1
b1111 J
b1111 T
b1111 Z
b1111 ]
b1011 0
b1011 U
b1011 \
b1011 h
1C
b1011 .
b1011 a
b1011 u
17
b0 *
b0 A
b0 f
b1011 g
b1011 ?
b1011 D
b1011 P
b1011 q
b1011 E
b0 )
b0 `
b0 z
b0 +
b0 R
b0 b
b0 d
b1011 ,
b1011 @
b1011 c
b1110000001000 j
b1000 X
b1000 F
b1000 e
b1000 '
b1000 I
b1000 |
b1000 {
b0 _
b111 ^
b0 w
b0 v
b1110000001000 !
b1110000001000 $
b1110000001000 8
b1110000001000 V
1"
#140
0"
#145
b1100 (
b1100 i
b1100 k
b1100 :
b1100 l
b1100 p
b1100 s
b1100 2
b1100 [
b1100 m
b1011 ;
b1011 K
b1011 n
b1011 1
b1011 J
b1011 T
b1011 Z
b1011 ]
1%
b1100 0
b1100 U
b1100 \
b1100 h
b0 .
b0 a
b0 u
07
b0 g
b0 ?
b0 D
b0 P
b0 q
0C
b0 >
b0 B
b0 H
b0 ,
b0 @
b0 c
b0 j
b0 X
b0 F
b0 e
b0 '
b0 I
b0 |
b0 {
b0 ^
b0 !
b0 $
b0 8
b0 V
1"
#150
0"
#155
b1101 0
b1101 U
b1101 \
b1101 h
b1101 (
b1101 i
b1101 k
b1101 :
b1101 l
b1101 p
b1101 s
b1101 2
b1101 [
b1101 m
b1111 ;
b1111 K
b1111 n
b1100 1
b1100 J
b1100 T
b1100 Z
b1100 ]
0%
b11 .
b11 a
b11 u
b11 ?
b11 D
b11 P
b11 q
b11 +
b11 R
b11 b
b11 d
b11 *
b11 A
b11 f
b100 )
b100 `
b100 z
b11 =
b11 G
b11 M
b11 W
13
0/
1<
b0 -
b0 O
b0 y
b1101000000011 j
b11 X
b11 F
b11 e
b11 '
b11 I
b11 |
b11 {
b100 _
b110 ^
b100 v
b101 L
b1011101000000011 !
b1011101000000011 $
b1011101000000011 8
b1011101000000011 V
1"
#160
0"
#165
b1110 :
b1110 l
b1110 p
b1110 s
b1110 2
b1110 [
b1110 m
b11100 ;
b11100 K
b11100 n
b1101 1
b1101 J
b1101 T
b1101 Z
b1101 ]
1%
b0 .
b0 a
b0 u
b1111 0
b1111 U
b1111 \
b1111 h
b0 ?
b0 D
b0 P
b0 q
b1111 (
b1111 i
b1111 k
b0 *
b0 A
b0 f
b0 +
b0 R
b0 b
b0 d
b0 )
b0 `
b0 z
16
b0 =
b0 G
b0 M
b0 W
03
0<
b1111 j
b1111 X
b1111 F
b1111 e
b1111 '
b1111 I
b1111 |
b1111 {
b0 _
b0 ^
b0 v
b10 L
b100000000001111 !
b100000000001111 $
b100000000001111 8
b100000000001111 V
1"
#170
0"
#175
b10000 :
b10000 l
b10000 p
b10000 s
b10000 2
b10000 [
b10000 m
b1010101 ;
b1010101 K
b1010101 n
b1111 1
b1111 J
b1111 T
b1111 Z
b1111 ]
0%
b11 .
b11 a
b11 u
b1001 *
b1001 A
b1001 f
b100011 g
b10000 0
b10000 U
b10000 \
b10000 h
0C
b11 ?
b11 D
b11 P
b11 q
b10000000000000000011 E
b1001 +
b1001 R
b1001 b
b1001 d
b100011 ,
b100011 @
b100011 c
b10000 (
b10000 i
b10000 k
b110 >
b110 B
b110 H
b100 )
b100 `
b100 z
06
1/
b1 -
b1 O
b1 y
b100111000110 j
b110 X
b110 F
b1000110 e
b1000110 '
b1000110 I
b1000110 |
b1000110 {
b11 _
b10 ^
b100 w
b11 v
b0 L
b100111000110 !
b100111000110 $
b100111000110 8
b100111000110 V
1"
#180
0"
#185
b10001 0
b10001 U
b10001 \
b10001 h
b10001 (
b10001 i
b10001 k
b10001 :
b10001 l
b10001 p
b10001 s
b10001 2
b10001 [
b10001 m
b10000 ;
b10000 K
b10000 n
b10000 1
b10000 J
b10000 T
b10000 Z
b10000 ]
1%
b0 .
b0 a
b0 u
b0 *
b0 A
b0 f
b0 g
b0 ?
b0 D
b0 P
b0 q
b0 )
b0 `
b0 z
b0 >
b0 B
b0 H
b0 +
b0 R
b0 b
b0 d
b0 ,
b0 @
b0 c
b0 j
b0 X
b0 F
b0 e
b0 '
b0 I
b0 |
b0 {
b0 _
b0 ^
b0 w
b0 v
b0 !
b0 $
b0 8
b0 V
1"
#190
0"
#195
b10010 0
b10010 U
b10010 \
b10010 h
b10010 (
b10010 i
b10010 k
b10010 :
b10010 l
b10010 p
b10001 ;
b10001 K
b10001 n
b10010 s
b10010 2
b10010 [
b10010 m
b10001 1
b10001 J
b10001 T
b10001 Z
b10001 ]
1"
#200
0"
