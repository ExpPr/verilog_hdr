$date
	Sun Jun 12 16:41:00 2022
$end
$version
	Icarus Verilog
$end
$timescale
	10ps
$end
$scope module cpu_tb_v $end
$var wire 16 ! instruction [15:0] $end
$var reg 1 " clk $end
$var reg 1 # rst $end
$var integer 32 $ i [31:0] $end
$scope module test $end
$var wire 16 % act_instruction [15:0] $end
$var wire 1 " clk $end
$var wire 1 # rst $end
$var wire 1 & zeroflag $end
$var wire 16 ' write_data_mid [15:0] $end
$var wire 13 ( sign_extendion [12:0] $end
$var wire 13 ) selected_j_or_beqpc1 [12:0] $end
$var wire 3 * sel_reg_write_loc_output [2:0] $end
$var wire 16 + sel_imm_result [15:0] $end
$var wire 16 , rt [15:0] $end
$var wire 16 - rs [15:0] $end
$var wire 2 . regdst [1:0] $end
$var wire 16 / reg_write_data [15:0] $end
$var wire 1 0 reg_write $end
$var wire 13 1 pc_next [12:0] $end
$var wire 13 2 pc_current [12:0] $end
$var wire 13 3 pc_add1 [12:0] $end
$var wire 1 4 mem_write $end
$var wire 2 5 mem_to_reg [1:0] $end
$var wire 1 6 mem_read $end
$var wire 1 7 jump $end
$var wire 1 8 jr_sel $end
$var wire 16 9 instruction [15:0] $end
$var wire 1 : branch $end
$var wire 13 ; beqpc1 [12:0] $end
$var wire 1 < beq_select $end
$var wire 13 = beq_cal_result [12:0] $end
$var wire 1 > alusrc $end
$var wire 2 ? aluop [1:0] $end
$var wire 3 @ alu_sel [2:0] $end
$var wire 16 A alu_result [15:0] $end
$scope module alu_oper $end
$var wire 1 & zero $end
$var wire 16 B rt [15:0] $end
$var wire 16 C rd [15:0] $end
$var wire 3 D alu_ctrl [2:0] $end
$var reg 1 E ov $end
$var reg 16 F result [15:0] $end
$var reg 32 G temp [31:0] $end
$upscope $end
$scope module aluctrl $end
$var wire 4 H instruction [3:0] $end
$var wire 2 I aluop [1:0] $end
$var reg 3 J alu_sel [2:0] $end
$upscope $end
$scope module beq_calcu $end
$var wire 13 K b [12:0] $end
$var wire 13 L a [12:0] $end
$var reg 13 M out [12:0] $end
$upscope $end
$scope module beq_sel_and $end
$var wire 1 & in1 $end
$var wire 1 < out $end
$var wire 1 : in2 $end
$upscope $end
$scope module ctrl $end
$var wire 3 N instruction [2:0] $end
$var wire 1 # rst $end
$var reg 2 O aluOp [1:0] $end
$var reg 1 > aluSrc $end
$var reg 1 : branch $end
$var reg 1 7 jump $end
$var reg 1 6 mem_read $end
$var reg 2 P mem_to_reg [1:0] $end
$var reg 1 4 mem_write $end
$var reg 2 Q regDst [1:0] $end
$var reg 1 0 reg_write $end
$upscope $end
$scope module dt_memory $end
$var wire 16 R addr [15:0] $end
$var wire 1 " clk $end
$var wire 1 6 re $end
$var wire 1 # rst $end
$var wire 1 4 we $end
$var wire 16 S strm [15:0] $end
$var wire 16 T data [15:0] $end
$var integer 32 U i [31:0] $end
$upscope $end
$scope module inst $end
$var wire 1 " clk $end
$var wire 1 # rst $end
$var wire 13 V pc [12:0] $end
$var wire 16 W instruct [15:0] $end
$upscope $end
$scope module jrctrl $end
$var wire 2 X aluop [1:0] $end
$var wire 4 Y instruction [3:0] $end
$var wire 1 8 jr_out $end
$upscope $end
$scope module pc_1_adder $end
$var wire 13 Z b [12:0] $end
$var wire 13 [ a [12:0] $end
$var reg 13 \ out [12:0] $end
$upscope $end
$scope module pc_to_instruct $end
$var wire 1 " clk $end
$var wire 1 # rst $end
$var wire 13 ] nextpc [12:0] $end
$var reg 13 ^ pc [12:0] $end
$upscope $end
$scope module regist_oper $end
$var wire 1 " clk $end
$var wire 1 0 reg_write $end
$var wire 3 _ rs_loc [2:0] $end
$var wire 1 # rst $end
$var wire 3 ` rt_loc [2:0] $end
$var wire 3 a write_reg_loc [2:0] $end
$var wire 16 b write_reg_data [15:0] $end
$var wire 16 c rt [15:0] $end
$var wire 16 d rs [15:0] $end
$upscope $end
$scope module sel_imm $end
$var wire 16 e a [15:0] $end
$var wire 16 f b [15:0] $end
$var wire 1 > sel $end
$var wire 16 g out [15:0] $end
$upscope $end
$scope module sel_jr_or_jbeqpc1 $end
$var wire 13 h b [12:0] $end
$var wire 1 8 sel $end
$var wire 13 i out [12:0] $end
$var wire 13 j a [12:0] $end
$upscope $end
$scope module sel_jump_or_beqpc1 $end
$var wire 13 k b [12:0] $end
$var wire 1 7 sel $end
$var wire 13 l out [12:0] $end
$var wire 13 m a [12:0] $end
$upscope $end
$scope module sel_pcadd1_or_beq $end
$var wire 13 n a [12:0] $end
$var wire 13 o b [12:0] $end
$var wire 1 < sel $end
$var wire 13 p out [12:0] $end
$upscope $end
$scope module sel_reg_write_data $end
$var wire 16 q a1 [15:0] $end
$var wire 16 r a2 [15:0] $end
$var wire 16 s a3 [15:0] $end
$var wire 2 t sel [1:0] $end
$var wire 16 u out [15:0] $end
$upscope $end
$scope module sel_reg_write_loc $end
$var wire 3 v a1 [2:0] $end
$var wire 3 w a2 [2:0] $end
$var wire 3 x a3 [2:0] $end
$var wire 2 y sel [1:0] $end
$var wire 3 z out [2:0] $end
$upscope $end
$scope module to_13bit_extend $end
$var wire 7 { instruction [6:0] $end
$var wire 13 | extended_instruction [12:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1 |
b1 {
b10 z
b0 y
b111 x
b0 w
b10 v
b0 u
b0 t
b1 s
b0 r
b0 q
b1 p
b10 o
b1 n
b1 m
b1 l
b1100100000001 k
b1 j
b1 i
b0 h
b0 g
b1 f
b0 e
b0 d
b0 c
b0 b
b10 a
b10 `
b110 _
b0 ^
b1 ]
b1 \
b0 [
b1 Z
b1 Y
b0 X
b1001100100000001 W
b0 V
b10000000 U
b0 T
b0 S
b0 R
b0 Q
b0 P
b0 O
b100 N
b10 M
b1 L
b1 K
b1 J
b0 I
b1 H
bx G
b0 F
0E
b1 D
b0 C
b0 B
b0 A
b1 @
b0 ?
0>
b10 =
0<
b1 ;
0:
b1001100100000001 9
08
07
06
b0 5
04
b1 3
b0 2
b1 1
00
b0 /
b0 .
b0 -
b0 ,
b0 +
b10 *
b1 )
b1 (
b0 '
1&
b1001100100000001 %
b0 $
0#
0"
b1001100100000001 !
$end
#50
b10000000 U
1"
#100
0"
b1 $
#150
b10000000 U
1"
#200
b100011 /
b100011 b
b100011 u
0&
b100011 '
b100011 S
b100011 r
b1 A
b1 F
b1 R
b1 q
b0 @
b0 D
b0 J
b1 +
b1 C
b1 g
b11 ?
b11 I
b11 O
b11 X
16
10
b1 5
b1 P
b1 t
1>
0"
b10 $
1#
#250
b10 1
b10 ]
b10 i
b10 )
b10 j
b10 l
b10 ;
b10 m
b10 p
b100 =
b100 M
b100 o
b10 s
b10 3
b10 L
b10 \
b10 n
b1001 /
b1001 b
b1001 u
b1001 '
b1001 S
b1001 r
b10 A
b10 F
b10 R
b10 q
b10 +
b10 C
b10 g
b11 *
b11 a
b11 z
b1100110000010 k
b10 Y
b10 H
b10 f
b10 (
b10 K
b10 |
b10 {
b11 `
b11 v
b0 ,
b0 T
b0 c
b0 e
b1001100110000010 !
b1001100110000010 %
b1001100110000010 9
b1001100110000010 W
b1 2
b1 V
b1 [
b1 ^
1"
#300
0"
b11 $
#350
b11 1
b11 ]
b11 i
b11 )
b11 j
b11 l
b11 ;
b11 m
b11 p
b1000011 =
b1000011 M
b1000011 o
b11 s
b11 3
b11 L
b11 \
b11 n
b100011 h
b101100 A
b101100 F
b101100 R
b101100 q
b100011 -
b100011 B
b100011 d
b0 '
b0 S
b0 r
b101100 /
b101100 b
b101100 u
b100 *
b100 a
b100 z
b1001 +
b1001 C
b1001 g
b0 ?
b0 I
b0 O
b0 X
06
b0 5
b0 P
b0 t
0>
b1 .
b1 Q
b1 y
b100111000000 k
b0 Y
b0 H
b1000000 f
b1000000 (
b1000000 K
b1000000 |
b1000000 {
b10 _
b100 w
b0 N
b100111000000 !
b100111000000 %
b100111000000 9
b100111000000 W
b1001 ,
b1001 T
b1001 c
b1001 e
b10 2
b10 V
b10 [
b10 ^
1"
#400
0"
b100 $
#450
b100 1
b100 ]
b100 i
b100 )
b100 j
b100 l
b100 ;
b100 m
b100 p
b11000 =
b11000 M
b11000 o
b100 s
b100 3
b100 L
b100 \
b100 n
1&
b0 /
b0 b
b0 u
b0 A
b0 F
b0 R
b0 q
b1 *
b1 a
b1 z
b100 @
b100 D
b100 J
b100110010100 k
b100 Y
b100 H
b10100 f
b10100 (
b10100 K
b10100 |
b10100 {
b1 w
b100110010100 !
b100110010100 %
b100110010100 9
b100110010100 W
b11 2
b11 V
b11 [
b11 ^
1"
#500
0"
b101 $
#550
b111 =
b111 M
b111 o
b101 s
b101 3
b101 L
b101 \
b101 n
b111 1
b111 ]
b111 i
1&
b111 )
b111 j
b111 l
b0 /
b0 b
b0 u
b111 ;
b111 m
b111 p
b0 +
b0 C
b0 g
b0 h
0E
b0 A
b0 F
b0 R
b0 q
1<
b0 *
b0 a
b0 z
b1 @
b1 D
b1 J
b0 ,
b0 T
b0 c
b0 e
b0 -
b0 B
b0 d
b1 ?
b1 I
b1 O
b1 X
1:
00
b0 .
b0 Q
b0 y
b10000000010 k
b10 Y
b10 H
b10 f
b10 (
b10 K
b10 |
b10 {
b0 `
b1 _
b0 w
b0 v
b110 N
b1100010000000010 !
b1100010000000010 %
b1100010000000010 9
b1100010000000010 W
b100 2
b100 V
b100 [
b100 ^
1"
#600
0"
b110 $
#650
b1001001 =
b1001001 M
b1001001 o
b1000 s
b1000 3
b1000 L
b1000 \
b1000 n
b1000 1
b1000 ]
b1000 i
0&
b1000 )
b1000 j
b1000 l
b1001 +
b1001 C
b1001 g
b11010 /
b11010 b
b11010 u
b1000 ;
b1000 m
b1000 p
b1001 ,
b1001 T
b1001 c
b1001 e
b100011 h
b11010 A
b11010 F
b11010 R
b11010 q
0<
b100011 -
b100011 B
b100011 d
b100 *
b100 a
b100 z
b0 ?
b0 I
b0 O
b0 X
0:
10
b1 .
b1 Q
b1 y
b100111000001 k
b1 Y
b1 H
b1000001 f
b1000001 (
b1000001 K
b1000001 |
b1000001 {
b11 `
b10 _
b100 w
b11 v
b0 N
b100111000001 !
b100111000001 %
b100111000001 9
b100111000001 W
b111 2
b111 V
b111 [
b111 ^
1"
#700
0"
b111 $
#750
b1001 1
b1001 ]
b1001 i
b1001 )
b1001 j
b1001 l
b1001 ;
b1001 m
b1001 p
b1001100 =
b1001100 M
b1001100 o
b1001 s
b1001 3
b1001 L
b1001 \
b1001 n
b101011 /
b101011 b
b101011 u
b101011 A
b101011 F
b101011 R
b101011 q
b11 @
b11 D
b11 J
b100111000011 k
b11 Y
b11 H
b1000011 f
b1000011 (
b1000011 K
b1000011 |
b1000011 {
b100111000011 !
b100111000011 %
b100111000011 9
b100111000011 W
b1000 2
b1000 V
b1000 [
b1000 ^
1"
#800
0"
b1000 $
#850
b1010 ;
b1010 m
b1010 p
b10111 =
b10111 M
b10111 o
b1010 s
b1010 3
b1010 L
b1010 \
b1010 n
1&
b1101 1
b1101 ]
b1101 i
b0 +
b0 C
b0 g
b0 h
b0 A
b0 F
b0 R
b0 q
b111 *
b111 a
b111 z
b1101 )
b1101 j
b1101 l
b1010 /
b1010 b
b1010 u
b0 ,
b0 T
b0 c
b0 e
b0 -
b0 B
b0 d
17
b10 5
b10 P
b10 t
b10 .
b10 Q
b10 y
b1101 k
b1101 Y
b1101 H
b1101 f
b1101 (
b1101 K
b1101 |
b1101 {
b0 `
b0 _
b0 w
b0 v
b11 N
b110000000001101 !
b110000000001101 %
b110000000001101 9
b110000000001101 W
b1001 2
b1001 V
b1001 [
b1001 ^
1"
#900
0"
b1001 $
#950
b1110 ;
b1110 m
b1110 p
b1010100 =
b1010100 M
b1010100 o
b1110 s
b1110 3
b1110 L
b1110 \
b1110 n
0&
b1001 +
b1001 C
b1001 g
b100011 h
b100 *
b100 a
b100 z
b1110 1
b1110 ]
b1110 i
0E
b11 A
b11 F
b11 R
b11 q
b10000000000000000011 G
b1001 ,
b1001 T
b1001 c
b1001 e
b100011 -
b100011 B
b100011 d
b11 /
b11 b
b11 u
b1110 )
b1110 j
b1110 l
b110 @
b110 D
b110 J
07
b0 5
b0 P
b0 t
b1 .
b1 Q
b1 y
b100111000110 k
b110 Y
b110 H
b1000110 f
b1000110 (
b1000110 K
b1000110 |
b1000110 {
b11 `
b10 _
b100 w
b11 v
b0 N
b100111000110 !
b100111000110 %
b100111000110 9
b100111000110 W
b1101 2
b1101 V
b1101 [
b1101 ^
1"
#1000
0"
b1010 $
#1050
b1111 )
b1111 j
b1111 l
b1111 ;
b1111 m
b1111 p
b10111 =
b10111 M
b10111 o
b1111 s
b1111 3
b1111 L
b1111 \
b1111 n
b1010 1
b1010 ]
b1010 i
1E
b1011 /
b1011 b
b1011 u
18
b0 +
b0 C
b0 g
b1010 h
b1011 A
b1011 F
b1011 R
b1011 q
b1011 G
b0 *
b0 a
b0 z
b0 ,
b0 T
b0 c
b0 e
b1010 -
b1010 B
b1010 d
b1110000001000 k
b1000 Y
b1000 H
b1000 f
b1000 (
b1000 K
b1000 |
b1000 {
b0 `
b111 _
b0 w
b0 v
b1110000001000 !
b1110000001000 %
b1110000001000 9
b1110000001000 W
b1110 2
b1110 V
b1110 [
b1110 ^
1"
#1100
0"
b1011 $
#1150
b1011 )
b1011 j
b1011 l
b1011 ;
b1011 m
b1011 p
b1101 =
b1101 M
b1101 o
b1011 s
b1011 3
b1011 L
b1011 \
b1011 n
b1011 1
b1011 ]
b1011 i
b101 /
b101 b
b101 u
08
b11 ,
b11 T
b11 c
b11 e
b11 h
b101 A
b101 F
b101 R
b101 q
0E
b10 +
b10 C
b10 g
b100 *
b100 a
b100 z
b0 @
b0 D
b0 J
b11 -
b11 B
b11 d
b11 ?
b11 I
b11 O
b11 X
1>
b0 .
b0 Q
b0 y
b1001000000010 k
b10 Y
b10 H
b10 f
b10 (
b10 K
b10 |
b10 {
b100 `
b100 _
b100 v
b111 N
b1111001000000010 !
b1111001000000010 %
b1111001000000010 9
b1111001000000010 W
b1010 2
b1010 V
b1010 [
b1010 ^
1"
#1200
0"
b1100 $
#1250
b1100 1
b1100 ]
b1100 i
b1100 )
b1100 j
b1100 l
b1100 ;
b1100 m
b1100 p
b1111 =
b1111 M
b1111 o
b1100 s
b1100 3
b1100 L
b1100 \
b1100 n
b11 /
b11 b
b11 u
b11 +
b11 C
b11 g
14
00
b0 h
b11 A
b11 F
b11 R
b11 q
b1101000000011 k
b11 Y
b11 H
b11 f
b11 (
b11 K
b11 |
b11 {
b110 _
b101 N
b0 -
b0 B
b0 d
b101 ,
b101 T
b101 c
b101 e
b1011101000000011 !
b1011101000000011 %
b1011101000000011 9
b1011101000000011 W
b1011 2
b1011 V
b1011 [
b1011 ^
1"
#1300
0"
b1101 $
#1350
b1101 ;
b1101 m
b1101 p
b11100 =
b11100 M
b11100 o
b1101 s
b1101 3
b1101 L
b1101 \
b1101 n
1&
b0 /
b0 b
b0 u
b1111 1
b1111 ]
b1111 i
b0 A
b0 F
b0 R
b0 q
b1111 )
b1111 j
b1111 l
b0 +
b0 C
b0 g
b0 ,
b0 T
b0 c
b0 e
b0 *
b0 a
b0 z
17
b0 ?
b0 I
b0 O
b0 X
04
0>
b1111 k
b1111 Y
b1111 H
b1111 f
b1111 (
b1111 K
b1111 |
b1111 {
b0 `
b0 _
b0 v
b10 N
b100000000001111 !
b100000000001111 %
b100000000001111 9
b100000000001111 W
b1100 2
b1100 V
b1100 [
b1100 ^
1"
#1400
0"
b1110 $
#1450
b10000 ;
b10000 m
b10000 p
b10000 =
b10000 M
b10000 o
b10000 s
b10000 3
b10000 L
b10000 \
b10000 n
b10000 1
b10000 ]
b10000 i
b10000 )
b10000 j
b10000 l
07
10
b1 .
b1 Q
b1 y
b0 k
b0 Y
b0 H
b0 f
b0 (
b0 K
b0 |
b0 {
b0 N
b0 !
b0 %
b0 9
b0 W
b1111 2
b1111 V
b1111 [
b1111 ^
1"
#1500
0"
b1111 $
#1550
b10001 =
b10001 M
b10001 o
b10001 1
b10001 ]
b10001 i
b10001 )
b10001 j
b10001 l
b10001 ;
b10001 m
b10001 p
b10001 s
b10001 3
b10001 L
b10001 \
b10001 n
b10000 2
b10000 V
b10000 [
b10000 ^
1"
#1600
0"
b10000 $
#1650
b10010 =
b10010 M
b10010 o
b10010 1
b10010 ]
b10010 i
b10010 )
b10010 j
b10010 l
b10010 ;
b10010 m
b10010 p
b10010 s
b10010 3
b10010 L
b10010 \
b10010 n
b10001 2
b10001 V
b10001 [
b10001 ^
1"
#1700
0"
b10001 $
#1750
b10011 =
b10011 M
b10011 o
b10011 1
b10011 ]
b10011 i
b10011 )
b10011 j
b10011 l
b10011 ;
b10011 m
b10011 p
b10011 s
b10011 3
b10011 L
b10011 \
b10011 n
b10010 2
b10010 V
b10010 [
b10010 ^
1"
#1800
0"
b10010 $
#1850
b10100 =
b10100 M
b10100 o
b10100 1
b10100 ]
b10100 i
b10100 )
b10100 j
b10100 l
b10100 ;
b10100 m
b10100 p
b10100 s
b10100 3
b10100 L
b10100 \
b10100 n
b10011 2
b10011 V
b10011 [
b10011 ^
1"
#1900
0"
b10011 $
#1950
b10101 =
b10101 M
b10101 o
b10101 1
b10101 ]
b10101 i
b10101 )
b10101 j
b10101 l
b10101 ;
b10101 m
b10101 p
b10101 s
b10101 3
b10101 L
b10101 \
b10101 n
b10100 2
b10100 V
b10100 [
b10100 ^
1"
#2000
0"
